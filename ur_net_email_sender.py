#!/usr/bin/env python3
"""
UR-NET Á©∫ÂÆ§Ê§úÊüªÁµêÊûú„É°„Éº„É´ÈÄÅ‰ø°„Éó„É≠„Ç∞„É©„É†
HTMLÂΩ¢Âºè„ÅÆÊ§úÊüªÁµêÊûú„É°„Éº„É´ÈÄÅ‰ø°„Çí„Çµ„Éù„Éº„Éà
"""

import smtplib
import json
import os
import argparse
import sys
from datetime import datetime
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.header import Header
from typing import Dict, List, Optional
import time

# Â∞ùËØïÂØºÂÖ• python-dotenvÔºåÂ¶ÇÊûúÊ≤°ÊúâÂÆâË£ÖÂàôË∑≥Ëøá
try:
    from dotenv import load_dotenv
    load_dotenv()  # Âä†ËΩΩ .env Êñá‰ª∂
except ImportError:
    print("‚ö†Ô∏è  python-dotenv Êú™ÂÆâË£ÖÔºåÂ∞Ü‰ΩøÁî®Á≥ªÁªüÁéØÂ¢ÉÂèòÈáè")
    print("   ÂÆâË£ÖÂëΩ‰ª§: pip install python-dotenv")

class URNetEmailSender:
    def __init__(self, smtp_config: Dict[str, str]):
        """
        „É°„Éº„É´ÈÄÅ‰ø°Ê©ü„ÇíÂàùÊúüÂåñ
        
        Args:
            smtp_config: SMTPË®≠ÂÆöËæûÊõ∏
        """
        self.smtp_server = smtp_config.get('server', 'smtp.email.ap-osaka-1.oci.oraclecloud.com')
        self.smtp_port = int(smtp_config.get('port', 587))
        self.smtp_user = smtp_config.get('user')
        self.smtp_pass = smtp_config.get('password')
        self.from_addr = smtp_config.get('from_addr', 'no-reply@k8scloud.site')
        self.max_retries = int(smtp_config.get('max_retries', 3))
        
        # BCC Âú∞ÂùÄÈÖçÁΩÆÔºàÊîØÊåÅÂ§ö‰∏™Âú∞ÂùÄÔºåÁî®ÈÄóÂè∑ÂàÜÈöîÔºâ
        bcc_addr = smtp_config.get('bcc_addr', '')
        self.bcc_addrs = [addr.strip() for addr in bcc_addr.split(',') if addr.strip()] if bcc_addr else []
        
    def format_results_to_html(self, results_data: Dict) -> str:
        """
        Ê§úÊüªÁµêÊûú„ÇíHTMLÂΩ¢Âºè„Å´„Éï„Ç©„Éº„Éû„ÉÉ„Éà
        
        Args:
            results_data: Ê§úÊüªÁµêÊûú„Éá„Éº„Çø
            
        Returns:
            HTMLÂΩ¢Âºè„ÅÆ„É°„Éº„É´ÂÜÖÂÆπ
        """
        # JSON„Éï„Ç°„Ç§„É´„Åã„ÇâË™≠„ÅøËæº„Çì„Å†„Éá„Éº„Çø„ÅÆÂ†¥Âêà
        if 'results' in results_data:
            results = results_data['results']
            timestamp = results_data.get('timestamp', datetime.now().isoformat())
            total_checked = results_data.get('total_checked', len(results))
            total_vacant_rooms = results_data.get('total_vacant_rooms', 0)
        else:
            # Áõ¥Êé•Ê∏°„Åï„Çå„ÅüÁµêÊûú„É™„Çπ„Éà„ÅÆÂ†¥Âêà
            results = results_data
            timestamp = datetime.now().isoformat()
            total_checked = len(results)
            total_vacant_rooms = sum(r.get('total_vacant', 0) for r in results if r.get('status') == 'success')
        
        # ÁµêÊûú„ÇíÂàÜÈ°û
        properties_with_rooms = [r for r in results if r.get('status') == 'success' and r.get('total_vacant', 0) > 0]
        properties_without_rooms = [r for r in results if r.get('status') == 'success' and r.get('total_vacant', 0) == 0]
        failed_properties = [r for r in results if r.get('status') != 'success']
        
        success_count = len(properties_with_rooms) + len(properties_without_rooms)
        failed_count = len(failed_properties)
        
        html_content = f"""
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>UR-NET Á©∫ÂÆ§Ê§úÊüªÁµêÊûúÂ†±Âëä</title>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }}
        .container {{
            background-color: white;
            border-radius: 10px;
            padding: 30px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        .header {{
            text-align: center;
            border-bottom: 3px solid #007bff;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }}
        .header h1 {{
            color: #007bff;
            margin: 0;
            font-size: 28px;
        }}
        .timestamp {{
            color: #666;
            font-size: 14px;
            margin-top: 10px;
        }}
        .stats {{
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            color: black;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
            border: 1px solid #dee2e6;
        }}
        .stats h2 {{
            margin: 0 0 15px 0;
            font-size: 20px;
        }}
        .stats-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
        }}
        .stat-item {{
            text-align: center;
            background: rgba(0,0,0,0.05);
            padding: 10px;
            border-radius: 5px;
        }}
        .stat-number {{
            font-size: 24px;
            font-weight: bold;
            display: block;
        }}
        .stat-label {{
            font-size: 12px;
            opacity: 0.7;
        }}
        .section {{
            margin-bottom: 30px;
        }}
        .section h2 {{
            color: #28a745;
            border-left: 4px solid #28a745;
            padding-left: 15px;
            margin-bottom: 20px;
        }}
        .section.no-rooms h2 {{
            color: #ffc107;
            border-left-color: #ffc107;
        }}
        .section.failed h2 {{
            color: #dc3545;
            border-left-color: #dc3545;
        }}
        .property {{
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
        }}
        .property-name {{
            font-size: 18px;
            font-weight: bold;
            color: #007bff;
            margin-bottom: 10px;
        }}
        .room {{
            background: white;
            border: 1px solid #e9ecef;
            border-radius: 5px;
            padding: 15px;
            margin: 10px 0;
        }}
        .room-title {{
            font-weight: bold;
            color: #28a745;
            margin-bottom: 8px;
        }}
        .room-details {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 10px;
        }}
        .room-detail {{
            background: #f8f9fa;
            padding: 8px;
            border-radius: 3px;
            text-align: center;
        }}
        .room-detail-label {{
            font-size: 12px;
            color: #666;
            display: block;
        }}
        .room-detail-value {{
            font-weight: bold;
            color: #333;
        }}
        .property-info {{
            background: #e3f2fd;
            border: 1px solid #bbdefb;
            border-radius: 6px;
            padding: 15px;
            margin: 15px 0;
        }}
        .property-info-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 12px;
        }}
        .property-info-item {{
            background: white;
            padding: 10px;
            border-radius: 4px;
            border-left: 3px solid #2196f3;
        }}
        .property-info-label {{
            font-size: 12px;
            color: #666;
            display: block;
            margin-bottom: 4px;
        }}
        .property-info-value {{
            font-weight: bold;
            color: #333;
            word-break: break-all;
        }}
        .property-info-source {{
            font-size: 10px;
            color: #999;
            font-style: italic;
            margin-top: 2px;
        }}
        .no-rooms-list {{
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 8px;
            padding: 20px;
        }}
        .no-rooms-item {{
            padding: 8px 0;
            border-bottom: 1px solid #ffeaa7;
        }}
        .no-rooms-item:last-child {{
            border-bottom: none;
        }}
        .failed-list {{
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            border-radius: 8px;
            padding: 20px;
        }}
        .failed-item {{
            padding: 8px 0;
            border-bottom: 1px solid #f5c6cb;
        }}
        .failed-item:last-child {{
            border-bottom: none;
        }}
        .footer {{
            text-align: center;
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #dee2e6;
            color: #666;
            font-size: 14px;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üè† UR-NET Á©∫ÂÆ§Ê§úÊüªÁµêÊûúÂ†±Âëä</h1>
            <div class="timestamp">ÁîüÊàêÊôÇÈñì: {datetime.fromisoformat(timestamp.replace('Z', '+00:00')).strftime('%YÂπ¥%mÊúà%dÊó• %H:%M:%S')}</div>
        </div>
        
        <div class="stats">
            <h2>üìä Áµ±Ë®àÊÉÖÂ†±</h2>
            <div class="stats-grid">
                <div class="stat-item">
                    <span class="stat-label">Á∑èÊ§úÊüªÊï∞Ôºö</span>
                    <span class="stat-number">{total_checked}</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">ÊàêÂäüÔºö</span>
                    <span class="stat-number">{success_count}</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Â§±ÊïóÔºö</span>
                    <span class="stat-number">{failed_count}</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Á∑èÁ©∫ÂÆ§Êï∞Ôºö</span>
                    <span class="stat-number">{total_vacant_rooms}</span>
                </div>
            </div>
        </div>
"""
        
        # Á©∫ÂÆ§„Åå„ÅÇ„ÇãÁâ©‰ª∂
        if properties_with_rooms:
            html_content += """
        <div class="section">
            <h2>üè† Á©∫ÂÆ§„Åå„ÅÇ„ÇãÁâ©‰ª∂</h2>
"""
            for prop in properties_with_rooms:
                html_content += f"""
            <div class="property">
                <div class="property-name">üìç {prop.get('property_name', '‰∏çÊòé')}</div>
                <div style="margin-bottom: 15px;">Á©∫ÂÆ§Êï∞: <strong>{prop.get('total_vacant', 0)}ÂÄã</strong></div>
                
                <div class="property-info">
                    <div class="property-info-grid">
                        <div class="property-info-item">
                            <span class="property-info-label">üöá ‰∫§ÈÄö</span>
                            <div class="property-info-value">{prop.get('transportation', '‰∏çÊòé')}</div>
                        </div>
                        <div class="property-info-item">
                            <span class="property-info-label">üìç ‰ΩèÊâÄ</span>
                            <div class="property-info-value">{prop.get('address', '‰∏çÊòé')}</div>
                        </div>
                        <div class="property-info-item">
                            <span class="property-info-label">üìû ÈõªË©±Áï™Âè∑</span>
                            <div class="property-info-value">{prop.get('phone_number', '‰∏çÊòé')}</div>
                        </div>
                        <div class="property-info-item">
                            <span class="property-info-label">üè¢ ÁÆ°ÁêÜÂπ¥Êï∞</span>
                            <div class="property-info-value">{prop.get('management_years', '‰∏çÊòé')}</div>
                        </div>
                        <div class="property-info-item">
                            <span class="property-info-label">üîó Ë©≥Á¥∞URL</span>
                            <div class="property-info-value">
                                <a href="{prop.get('url', '#')}" target="_blank" style="color: #007bff; text-decoration: none;">
                                    {prop.get('url', '‰∏çÊòé')}
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
"""
                for i, room in enumerate(prop.get('vacant_rooms', []), 1):
                    html_content += f"""
                <div class="room">
                    <div class="room-title">üè† Á©∫ÂÆ§ {i}</div>
                    <div class="room-details">
                        <div class="room-detail">
                            <span class="room-detail-label">ÂÆ∂Ë≥É(ÂÖ±ÁõäË≤ª)</span>
                            <span class="room-detail-value">{room.get('rent', '‰∏çÊòé')}</span>
                        </div>
                        <div class="room-detail">
                            <span class="room-detail-label">ÈñìÂèñ„Çä</span>
                            <span class="room-detail-value">{room.get('type', '‰∏çÊòé')}</span>
                        </div>
                        <div class="room-detail">
                            <span class="room-detail-label">Â∫äÈù¢Á©ç</span>
                            <span class="room-detail-value">{room.get('area', '‰∏çÊòé')}</span>
                        </div>
                        <div class="room-detail">
                            <span class="room-detail-label">ÈöéÊï∞</span>
                            <span class="room-detail-value">{room.get('floor', '‰∏çÊòé')}</span>
                        </div>
                    </div>
                </div>
"""
                html_content += "            </div>\n"
            html_content += "        </div>\n"
        
        # Á©∫ÂÆ§„Å™„Åó„ÅÆÁâ©‰ª∂
        if properties_without_rooms:
            html_content += """
        <div class="section no-rooms">
            <h2>üö´ Á©∫ÂÆ§„Å™„Åó„ÅÆÁâ©‰ª∂</h2>
"""
            for prop in properties_without_rooms:
                html_content += f"""
            <div class="property">
                <div class="property-name">üìç {prop.get('property_name', 'Êú™Áü•')}</div>
                <div style="margin-bottom: 15px; color: #856404; font-weight: bold;">Áä∂ÊÖã: „ÅîÁ¥π‰ªãÂá∫Êù•„Çã„ÅäÈÉ®Â±ã„ÅØ„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇ</div>
                
                <div class="property-info">
                    <div class="property-info-grid">
                        <div class="property-info-item">
                            <span class="property-info-label">üöá ‰∫§ÈÄö</span>
                            <div class="property-info-value">{prop.get('transportation', 'Êú™Áü•')}</div>
                        </div>
                        <div class="property-info-item">
                            <span class="property-info-label">üìç ‰ΩèÊâÄ</span>
                            <div class="property-info-value">{prop.get('address', 'Êú™Áü•')}</div>
                        </div>
                        <div class="property-info-item">
                            <span class="property-info-label">üìû ÈõªË©±Áï™Âè∑</span>
                            <div class="property-info-value">{prop.get('phone_number', 'Êú™Áü•')}</div>
                        </div>
                        <div class="property-info-item">
                            <span class="property-info-label">üè¢ ÁÆ°ÁêÜÂπ¥Êï∞</span>
                            <div class="property-info-value">{prop.get('management_years', 'Êú™Áü•')}</div>
                        </div>
                        <div class="property-info-item">
                            <span class="property-info-label">üîó Ë©≥Á¥∞URL</span>
                            <div class="property-info-value">
                                <a href="{prop.get('url', '#')}" target="_blank" style="color: #007bff; text-decoration: none;">
                                    {prop.get('url', 'Êú™Áü•')}
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
"""
            html_content += """
        </div>
"""
        
        # Â§±Êïó„Åó„ÅüÁâ©‰ª∂
        if failed_properties:
            html_content += """
        <div class="section failed">
            <h2>‚ùå Ê§úÊüªÂ§±Êïó„ÅÆÁâ©‰ª∂</h2>
"""
            for prop in failed_properties:
                html_content += f"""
            <div class="property">
                <div class="property-name">üìç {prop.get('property_name', 'Êú™Áü•')}</div>
                <div style="margin-bottom: 15px; color: #721c24; font-weight: bold;">„Ç®„É©„Éº: {prop.get('error', '‰∏çÊòé„Å™„Ç®„É©„Éº')}</div>
                
                <div class="property-info">
                    <div class="property-info-grid">
                        <div class="property-info-item">
                            <span class="property-info-label">üöá ‰∫§ÈÄö‰ø°ÊÅØ</span>
                            <div class="property-info-value">{prop.get('transportation', 'Êú™Áü•')}</div>
                            <div class="property-info-source">({prop.get('transportation_source', 'Êú™Áü•')})</div>
                        </div>
                        <div class="property-info-item">
                            <span class="property-info-label">üìç Âú∞ÂùÄ</span>
                            <div class="property-info-value">{prop.get('address', 'Êú™Áü•')}</div>
                            <div class="property-info-source">({prop.get('address_source', 'Êú™Áü•')})</div>
                        </div>
                        <div class="property-info-item">
                            <span class="property-info-label">üìû ËÅîÁ≥ªÁîµËØù</span>
                            <div class="property-info-value">{prop.get('phone_number', 'Êú™Áü•')}</div>
                            <div class="property-info-source">({prop.get('phone_source', 'Êú™Áü•')})</div>
                        </div>
                        <div class="property-info-item">
                            <span class="property-info-label">üè¢ ÁÆ°ÁêÜÂπ¥Êï∞</span>
                            <div class="property-info-value">{prop.get('management_years', 'Êú™Áü•')}</div>
                            <div class="property-info-source">({prop.get('management_years_source', 'Êú™Áü•')})</div>
                        </div>
                        <div class="property-info-item">
                            <span class="property-info-label">üîó Ë©≥Á¥∞URL</span>
                            <div class="property-info-value">
                                <a href="{prop.get('url', '#')}" target="_blank" style="color: #007bff; text-decoration: none;">
                                    {prop.get('url', 'Êú™Áü•')}
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
"""
            html_content += """
        </div>
"""
        
        html_content += """
        <div class="footer">
            <p>„Åì„ÅÆÂ†±ÂëäÊõ∏„ÅØ UR-NET „Éê„ÉÉ„ÉÅÁ©∫ÂÆ§Ê§úÊüª„Éó„É≠„Ç∞„É©„É†„Å´„Çà„ÇäËá™ÂãïÁîüÊàê„Åï„Çå„Åæ„Åó„Åü</p>
            <p>„ÅîË≥™Âïè„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„ÄÅ„Ç∑„Çπ„ÉÜ„É†ÁÆ°ÁêÜËÄÖ„Å´„ÅäÂïè„ÅÑÂêà„Çè„Åõ„Åè„Å†„Åï„ÅÑ</p>
        </div>
    </div>
</body>
</html>
"""
        
        return html_content
    
    def format_text_results(self, text_results: str) -> str:
        """
        „ÉÜ„Ç≠„Çπ„ÉàÂΩ¢Âºè„ÅÆÁµêÊûú„ÇíHTML„Å´Â§âÊèõ
        
        Args:
            text_results: „ÉÜ„Ç≠„Çπ„ÉàÂΩ¢Âºè„ÅÆÊ§úÊüªÁµêÊûú
            
        Returns:
            HTMLÂΩ¢Âºè„ÅÆ„É°„Éº„É´ÂÜÖÂÆπ
        """
        # ÁÆÄÂçïÁöÑÊñáÊú¨Âà∞HTMLËΩ¨Êç¢
        html_content = f"""
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>UR-NET Á©∫ÂÆ§Ê§úÊüªÁµêÊûúÂ†±Âëä</title>
    <style>
        body {{
            font-family: 'MS PGothic', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }}
        .container {{
            background-color: white;
            border-radius: 10px;
            padding: 30px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        .header {{
            text-align: center;
            border-bottom: 3px solid #007bff;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }}
        .header h1 {{
            color: #007bff;
            margin: 0;
            font-size: 28px;
        }}
        .content {{
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 20px;
            white-space: pre-wrap;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.4;
        }}
        .footer {{
            text-align: center;
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #dee2e6;
            color: #666;
            font-size: 14px;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üè† UR-NET Á©∫ÂÆ§Ê§úÊüªÁµêÊûúÂ†±Âëä</h1>
            <div style="color: #666; font-size: 14px; margin-top: 10px;">
                ÁîüÊàêÊôÇÈñì: {datetime.now().strftime('%YÂπ¥%mÊúà%dÊó• %H:%M:%S')}
            </div>
        </div>
        
        <div class="content">{text_results}</div>
        
        <div class="footer">
            <p>„Åì„ÅÆÂ†±ÂëäÊõ∏„ÅØ UR-NET „Éê„ÉÉ„ÉÅÁ©∫ÂÆ§Ê§úÊüª„Éó„É≠„Ç∞„É©„É†„Å´„Çà„ÇäËá™ÂãïÁîüÊàê„Åï„Çå„Åæ„Åó„Åü</p>
            <p>„ÅîË≥™Âïè„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„ÄÅ„Ç∑„Çπ„ÉÜ„É†ÁÆ°ÁêÜËÄÖ„Å´„ÅäÂïè„ÅÑÂêà„Çè„Åõ„Åè„Å†„Åï„ÅÑ</p>
        </div>
    </div>
</body>
</html>
"""
        return html_content
    
    def send_email(self, to_addr: str, subject: str, html_content: str, 
                   text_content: Optional[str] = None, bcc_addrs: Optional[List[str]] = None) -> bool:
        """
        „É°„Éº„É´„ÇíÈÄÅ‰ø°
        
        Args:
            to_addr: ÂÆõÂÖà„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ
            subject: „É°„Éº„É´‰ª∂Âêç
            html_content: HTMLÂÜÖÂÆπ
            text_content: „Éó„É¨„Éº„É≥„ÉÜ„Ç≠„Çπ„ÉàÂÜÖÂÆπÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
            bcc_addrs: BCCÂú∞ÂùÄÂàóË°®Ôºà„Ç™„Éó„Ç∑„Éß„É≥„ÄÅÊú™ÊåáÂÆöÊó∂‰ΩøÁî®ÈÖçÁΩÆÁöÑÈªòËÆ§BCCÂú∞ÂùÄÔºâ
            
        Returns:
            ÈÄÅ‰ø°ÊàêÂäü„Åã„Å©„ÅÜ„Åã
        """
        print(f"üìß „É°„Éº„É´„ÇíÊ∫ñÂÇô‰∏≠: {to_addr}")
        print(f"üìß „É°„Éº„É´‰ª∂Âêç: {subject}")
        
        # ‰ΩøÁî®‰º†ÂÖ•ÁöÑ BCC Âú∞ÂùÄÔºåÂ¶ÇÊûúÊ≤°ÊúâÂàô‰ΩøÁî®ÈÖçÁΩÆÁöÑÈªòËÆ§ BCC Âú∞ÂùÄ
        actual_bcc_addrs = bcc_addrs if bcc_addrs is not None else self.bcc_addrs
        if actual_bcc_addrs:
            print(f"üìß BCC Âú∞ÂùÄ: {', '.join(actual_bcc_addrs)}")
        
        for attempt in range(self.max_retries):
            try:
                # „É°„Éº„É´„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Çí‰ΩúÊàê
                msg = MIMEMultipart('alternative')
                msg['From'] = Header(self.from_addr)
                msg['To'] = Header(to_addr)
                msg['Subject'] = Header(subject, 'utf-8')
                
                # Ê∑ªÂä† BCC Â§¥ÈÉ®Ôºà‰ªÖÁî®‰∫éÊòæÁ§∫ÔºåÂÆûÈôÖÂèëÈÄÅÊó∂‰ºöÂú® sendmail ‰∏≠Â§ÑÁêÜÔºâ
                if actual_bcc_addrs:
                    msg['Bcc'] = Header(', '.join(actual_bcc_addrs))
                
                # „Éó„É¨„Éº„É≥„ÉÜ„Ç≠„Çπ„Éà„Éê„Éº„Ç∏„Éß„É≥„ÇíËøΩÂä†ÔºàÊèê‰æõ„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥ÂêàÔºâ
                if text_content:
                    text_part = MIMEText(text_content, 'plain', 'utf-8')
                    msg.attach(text_part)
                
                # HTML„Éê„Éº„Ç∏„Éß„É≥„ÇíËøΩÂä†
                html_part = MIMEText(html_content, 'html', 'utf-8')
                msg.attach(html_part)
                
                # ÊûÑÂª∫ÊâÄÊúâÊî∂‰ª∂‰∫∫ÂàóË°®ÔºàÂåÖÊã¨ TO Âíå BCCÔºâ
                all_recipients = [to_addr] + actual_bcc_addrs
                
                # SMTP„Çµ„Éº„Éê„Éº„Å´Êé•Á∂ö„Åó„Å¶ÈÄÅ‰ø°
                with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                    server.starttls()  # TLSÊöóÂè∑Âåñ„ÇíÊúâÂäπÂåñ
                    server.login(self.smtp_user, self.smtp_pass)
                    server.sendmail(self.from_addr, all_recipients, msg.as_string())
                
                print(f"‚úÖ „É°„Éº„É´ÈÄÅ‰ø°ÊàêÂäüÔºÅ(Ë©¶Ë°å {attempt + 1}/{self.max_retries})")
                if actual_bcc_addrs:
                    print(f"‚úÖ BCC ÈÄÅ‰ø°ÊàêÂäü: {len(actual_bcc_addrs)} ‰∏™Âú∞ÂùÄ")
                return True
                
            except Exception as e:
                print(f"‚ùå „É°„Éº„É´ÈÄÅ‰ø°Â§±Êïó (Ë©¶Ë°å {attempt + 1}/{self.max_retries}): {e}")
                if attempt < self.max_retries - 1:
                    wait_time = (attempt + 1) * 2  # Â¢óÂä†ÂæÖÊ©üÊôÇÈñì
                    print(f"‚è≥ {wait_time} ÁßíÂæÖÊ©ü„Åó„Å¶ÂÜçË©¶Ë°å...")
                    time.sleep(wait_time)
                else:
                    print("‚ùå „Åô„Åπ„Å¶„ÅÆÂÜçË©¶Ë°å„ÅåÂ§±Êïó„Åó„Åæ„Åó„Åü")
                    return False
        
        return False

def load_config_from_env() -> Dict[str, str]:
    """
    Áí∞Â¢ÉÂ§âÊï∞„Åã„ÇâSMTPË®≠ÂÆö„ÇíË™≠„ÅøËæº„ÇÄ
    
    Returns:
        SMTPË®≠ÂÆöËæûÊõ∏
    """
    # ÂøÖÈ°ªÁöÑÈÖçÁΩÆÈ°πÊ£ÄÊü•
    smtp_user = os.getenv('SMTP_USER')
    smtp_pass = os.getenv('SMTP_PASS')
    
    if not smtp_user or not smtp_pass:
        print("‚ùå ÈîôËØØ: SMTP_USER Âíå SMTP_PASS ÁéØÂ¢ÉÂèòÈáèÂøÖÈ°ªËÆæÁΩÆ")
        print("   ËØ∑Âú® .env Êñá‰ª∂‰∏≠ÈÖçÁΩÆËøô‰∫õÂÄºÔºåÊàñËÆæÁΩÆÁ≥ªÁªüÁéØÂ¢ÉÂèòÈáè")
        sys.exit(1)
    
    return {
        'server': os.getenv('SMTP_SERVER', 'smtp.email.ap-osaka-1.oci.oraclecloud.com'),
        'port': os.getenv('SMTP_PORT', '587'),
        'user': smtp_user,
        'password': smtp_pass,
        'from_addr': os.getenv('FROM_ADDR', 'no-reply@k8scloud.site'),
        'max_retries': os.getenv('MAX_RETRIES', '3'),
        'bcc_addr': os.getenv('BCC_ADDR', '')
    }

def load_results_from_json(file_path: str) -> Dict:
    """
    JSON„Éï„Ç°„Ç§„É´„Åã„ÇâÊ§úÊüªÁµêÊûú„ÇíË™≠„ÅøËæº„ÇÄ
    
    Args:
        file_path: JSON„Éï„Ç°„Ç§„É´„Éë„Çπ
        
    Returns:
        Ê§úÊüªÁµêÊûú„Éá„Éº„Çø
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ùå „Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: {file_path}")
        return {}
    except json.JSONDecodeError as e:
        print(f"‚ùå JSONËß£Êûê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: {e}")
        return {}
    except Exception as e:
        print(f"‚ùå „Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: {e}")
        return {}

def main():
    """
    „É°„Ç§„É≥Èñ¢Êï∞ - „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„ÇíÂá¶ÁêÜ„Åó„ÄÅ„É°„Éº„É´ÈÄÅ‰ø°„ÇíÂÆüË°å
    
    ‰ΩøÁî®‰æã:
        python ur_net_email_sender.py --results results.json --to your@email.com
        python ur_net_email_sender.py --results results.json --to your@email.com --subject "„Ç´„Çπ„Çø„É†‰ª∂Âêç"
        python ur_net_email_sender.py --results results.json --to your@email.com --text-only
    """
    parser = argparse.ArgumentParser(description='UR-NET Á©∫ÂÆ§Ê§úÊüªÁµêÊûú„É°„Éº„É´ÈÄÅ‰ø°„Éó„É≠„Ç∞„É©„É†')
    parser.add_argument('-j', '--json', help='JSONÁµêÊûú„Éï„Ç°„Ç§„É´„Éë„Çπ')
    parser.add_argument('-t', '--text', help='„ÉÜ„Ç≠„Çπ„ÉàÁµêÊûú„Éï„Ç°„Ç§„É´„Éë„Çπ')
    parser.add_argument('-to', '--to-addr', help='ÂÆõÂÖà„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ')
    parser.add_argument('-s', '--subject', default='UR-NETÁ©∫ÂÆ§Ê§úÊüªÁµêÊûúÂ†±Âëä', help='„É°„Éº„É´‰ª∂Âêç')
    parser.add_argument('--test', action='store_true', help='„ÉÜ„Çπ„Éà„É°„Éº„É´„ÇíÈÄÅ‰ø°')
    
    args = parser.parse_args()
    
    # SMTPË®≠ÂÆö„ÇíË™≠„ÅøËæº„ÇÄ
    smtp_config = load_config_from_env()
    
    # „É°„Éº„É´ÈÄÅ‰ø°„ÇØ„É©„Çπ„Çí‰ΩúÊàê
    sender = URNetEmailSender(smtp_config)
    
    # ÂÆõÂÖà„ÇíÊ±∫ÂÆö
    to_addr = args.to_addr or os.getenv('DEFAULT_TO_ADDR')
    
    # „É°„Éº„É´ÂÜÖÂÆπ„ÇíÊ∫ñÂÇô
    if args.test:
        # „ÉÜ„Çπ„Éà„É°„Éº„É´„ÇíÈÄÅ‰ø°
        test_results = """
================================================================================
üè† UR-NET „Éê„ÉÉ„ÉÅÁ©∫ÂÆ§Ê§úÊüªÁµêÊûú
================================================================================
üìä Áµ±Ë®àÊÉÖÂ†±:
   Á∑èÊ§úÊüªÊï∞: 23
   ÊàêÂäü: 23
   Â§±Êïó: 0
   Á∑èÁ©∫ÂÆ§Êï∞: 2

üè† Á©∫ÂÆ§„ÅÇ„Çä„ÅÆÁâ©‰ª∂:
--------------------------------------------------

üìç Êù±Â§ßÂ≥∂ÈßÖÂâç„Éè„Ç§„ÉÑ
   Á©∫ÂÆ§Êï∞: 1ÂÄã
   üè† Á©∫ÂÆ§ 1:
      ÈÉ®Â±ã: 2Âè∑Ê£ü211Âè∑ÂÆ§
      Ë≥ÉÊñô: 166,500ÂÜÜ
      ÈñìÂèñ„Çä: 2LDK
      Èù¢Á©ç: 66„é°
      ÈöéÊï∞: 2Èöé

üìç „Ç∑„ÉÜ„Ç£„Ç≥„Éº„Éà‰∏ñÁî∞Ë∞∑Áµ¶Áî∞
   Á©∫ÂÆ§Êï∞: 1ÂÄã
   üè† Á©∫ÂÆ§ 1:
      ÈÉ®Â±ã: 
      Ë≥ÉÊñô: 145,100ÂÜÜ
      ÈñìÂèñ„Çä: 2LDK
      Èù¢Á©ç: 65„é°
      ÈöéÊï∞: 3Èöé

üö´ Á©∫ÂÆ§„Å™„Åó„ÅÆÁâ©‰ª∂:
--------------------------------------------------
üìç ‰∫ÄÊà∏‰∫å‰∏ÅÁõÆ: „ÅîÁ¥π‰ªãÂá∫Êù•„Çã„ÅäÈÉ®Â±ã„ÅØ„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇ
üìç Â§ßÂ≥∂Âõõ‰∏ÅÁõÆ: „ÅîÁ¥π‰ªãÂá∫Êù•„Çã„ÅäÈÉ®Â±ã„ÅØ„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇ
üìç Â§ßÂ≥∂ÂÖ≠‰∏ÅÁõÆ: „ÅîÁ¥π‰ªãÂá∫Êù•„Çã„ÅäÈÉ®Â±ã„ÅØ„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇ
üìç Êú®Â†¥‰∫å‰∏ÅÁõÆ: „ÅîÁ¥π‰ªãÂá∫Êù•„Çã„ÅäÈÉ®Â±ã„ÅØ„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇ
üìç Â§ßÂ≥∂‰∏É‰∏ÅÁõÆ: „ÅîÁ¥π‰ªãÂá∫Êù•„Çã„ÅäÈÉ®Â±ã„ÅØ„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇ
üìç Êù±ÈôΩ„Éë„Éº„ÇØ„Çµ„Ç§„Éâ„Éè„Ç§„ÉÑ: „ÅîÁ¥π‰ªãÂá∫Êù•„Çã„ÅäÈÉ®Â±ã„ÅØ„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇ
üìç Êú®Â†¥ÂÖ¨Âúí‰∏âÂ•Ω‰ΩèÂÆÖ: „ÅîÁ¥π‰ªãÂá∫Êù•„Çã„ÅäÈÉ®Â±ã„ÅØ„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇ
üìç Êú®Â†¥ÂÖ¨ÂúíÂπ≥Èáé‰ΩèÂÆÖ: „ÅîÁ¥π‰ªãÂá∫Êù•„Çã„ÅäÈÉ®Â±ã„ÅØ„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇ
üìç Êú®Â†¥‰∏â‰∏ÅÁõÆ„Éë„Éº„ÇØ„Éè„Ç§„ÉÑ: „ÅîÁ¥π‰ªãÂá∫Êù•„Çã„ÅäÈÉ®Â±ã„ÅØ„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇ
üìç Êú®Â†¥ÂÖ¨ÂúíÂπ≥Èáé‰∏â‰∏ÅÁõÆ„Éè„Ç§„ÉÑ: „ÅîÁ¥π‰ªãÂá∫Êù•„Çã„ÅäÈÉ®Â±ã„ÅØ„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇ
üìç „É¥„Çß„ÉÉ„Çª„É´Êú®Â†¥Âçó: „ÅîÁ¥π‰ªãÂá∫Êù•„Çã„ÅäÈÉ®Â±ã„ÅØ„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇ
üìç „Ç∑„ÉÜ„Ç£„Ç≥„Éº„ÉàÂ§ßÂ≥∂: „ÅîÁ¥π‰ªãÂá∫Êù•„Çã„ÅäÈÉ®Â±ã„ÅØ„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇ
üìç „Ç¢„Éº„Éê„É≥„É©„Ç§„Éï‰∫ÄÊà∏: „ÅîÁ¥π‰ªãÂá∫Êù•„Çã„ÅäÈÉ®Â±ã„ÅØ„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇ
üìç ‰∏äÈ¶¨‰∫å‰∏ÅÁõÆ: „ÅîÁ¥π‰ªãÂá∫Êù•„Çã„ÅäÈÉ®Â±ã„ÅØ„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇ
üìç ÁµåÂ†ÇËµ§Â†§ÈÄö„Çä: „ÅîÁ¥π‰ªãÂá∫Êù•„Çã„ÅäÈÉ®Â±ã„ÅØ„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇ
üìç „Ç∑„ÉÜ„Ç£„Éè„Ç§„ÉÑÁÉèÂ±±: „ÅîÁ¥π‰ªãÂá∫Êù•„Çã„ÅäÈÉ®Â±ã„ÅØ„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇ
üìç ‰∏ñÁî∞Ë∞∑ÈÄö„Çä„Ç∑„ÉÜ„Ç£„Éè„Ç§„ÉÑËã•Êûó: „ÅîÁ¥π‰ªãÂá∫Êù•„Çã„ÅäÈÉ®Â±ã„ÅØ„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇ
üìç „Éï„É¨„Éº„É´Ë•øÁµåÂ†Ç: „ÅîÁ¥π‰ªãÂá∫Êù•„Çã„ÅäÈÉ®Â±ã„ÅØ„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇ
üìç „Çπ„ÇØ„Ç®„Ç¢„Éº‰∏ñÁî∞Ë∞∑Ê°ú‰∏ò: „ÅîÁ¥π‰ªãÂá∫Êù•„Çã„ÅäÈÉ®Â±ã„ÅØ„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇ
üìç „Ç¢„ÇØ„ÉÜ„Ç£‰∏âËªíËå∂Â±ã: „ÅîÁ¥π‰ªãÂá∫Êù•„Çã„ÅäÈÉ®Â±ã„ÅØ„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇ
üìç „Ç∑„ÉÜ„Ç£„Ç≥„Éº„Éà‰∏äÈ¶¨: „ÅîÁ¥π‰ªãÂá∫Êù•„Çã„ÅäÈÉ®Â±ã„ÅØ„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇ
"""
        html_content = sender.format_text_results(test_results)
        subject = f"[„ÉÜ„Çπ„Éà] {args.subject}"
        
    elif args.json:
        # JSON„Éï„Ç°„Ç§„É´„Åã„ÇâÁµêÊûú„ÇíË™≠„ÅøËæº„ÇÄ
        results_data = load_results_from_json(args.json)
        if not results_data:
            print("‚ùå JSON„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„ÇÅ„Å™„ÅÑ„Åã„ÄÅ„Éï„Ç°„Ç§„É´„ÅåÁ©∫„Åß„Åô")
            return
        
        html_content = sender.format_results_to_html(results_data)
        subject = args.subject
        
    elif args.text:
        # „ÉÜ„Ç≠„Çπ„Éà„Éï„Ç°„Ç§„É´„Åã„ÇâÁµêÊûú„ÇíË™≠„ÅøËæº„ÇÄ
        try:
            with open(args.text, 'r', encoding='utf-8') as f:
                text_results = f.read()
            html_content = sender.format_text_results(text_results)
            subject = args.subject
        except Exception as e:
            print(f"‚ùå „ÉÜ„Ç≠„Çπ„Éà„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: {e}")
            return
    else:
        print("‚ùå --json„ÄÅ--text„ÄÅ„Åæ„Åü„ÅØ --test „Éë„É©„É°„Éº„Çø„ÇíÊåáÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
        return
    
    # „É°„Éº„É´„ÇíÈÄÅ‰ø°
    success = sender.send_email(to_addr, subject, html_content)
    
    if success:
        print(f"\nüéâ „É°„Éº„É´ÈÄÅ‰ø°ÂÆå‰∫ÜÔºÅ")
        print(f"üìß ÂÆõÂÖà: {to_addr}")
        print(f"üìß ‰ª∂Âêç: {subject}")
    else:
        print(f"\nüí• „É°„Éº„É´ÈÄÅ‰ø°Â§±ÊïóÔºÅ")
        sys.exit(1)

if __name__ == "__main__":
    main()